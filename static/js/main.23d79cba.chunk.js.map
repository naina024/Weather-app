{"version":3,"sources":["Components/Form/Form.js","Components/Weather/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","onSubmit","loadWeather","type","placeholder","name","autoComplete","Weather","city","src","icon","height","width","alt","currTemp","convertTemp","min","max","maxminTemp","minTemp","maxTemp","description","charAt","toUpperCase","slice","App","getWeather","e","a","preventDefault","console","log","country","target","elements","value","fetch","api_call","json","response","setState","sys","main","weather","curr_temp","temp","max_temp","temp_max","min_temp","temp_min","error","undefined","state","temperature","Math","floor","this","kelvinToCelcius","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.23d79cba.chunk.js","sourcesContent":["import React from 'react';\nimport './Form.css';\n\nconst Form = (props) => {\n\treturn (\n\t\t<div className='form-container h-100'>\n\t\t\t<form onSubmit={props.loadWeather}>\n\t\t\t\t<div className='row'>\n\t\t\t\t\t<div className='col-md-3 '>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tplaceholder='City'\n\t\t\t\t\t\t\tname='city'\n\t\t\t\t\t\t\tclassName='form-city text-white py-3'\n\t\t\t\t\t\t\tautoComplete='off'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='col-md-3'>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tplaceholder='Country'\n\t\t\t\t\t\t\tname='country'\n\t\t\t\t\t\t\tclassName='form-country text-white py-3'\n\t\t\t\t\t\t\tautoComplete='off'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='col-md-3 text-md-left'>\n\t\t\t\t\t\t<button className='btn btn-warning'>Get weather</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nexport default Form;\n","import React from 'react';\nimport './Weather.css';\n\nconst Weather = (props) => {\n\treturn (\n\t\t<div className='weather-container'>\n\t\t\t<h1 className='text-white py-3'>\n\t\t\t\t{props.city}\n\t\t\t\t{/* , {props.country} */}\n\t\t\t</h1>\n\t\t\t<h5 className='py-4'>\n\t\t\t\t<img\n\t\t\t\t\tsrc={'http://openweathermap.org/img/w/' + props.icon + '.png'}\n\t\t\t\t\theight={120}\n\t\t\t\t\twidth={120}\n\t\t\t\t\talt=''\n\t\t\t\t/>\n\t\t\t</h5>\n\n\t\t\t{/* Get current temperature */}\n\t\t\t{props.currTemp ? (\n\t\t\t\t<h1 className='text-white py-2'>\n\t\t\t\t\t{props.convertTemp(props.currTemp)}&deg;\n\t\t\t\t</h1>\n\t\t\t) : null}\n\n\t\t\t{/* show max and min temp */}\n\t\t\t{maxminTemp(\n\t\t\t\tprops.convertTemp(props.minTemp),\n\t\t\t\tprops.convertTemp(props.maxTemp)\n\t\t\t)}\n\n\t\t\t{/* Weather description */}\n\t\t\t<h4 className='text-white py-3'>\n\t\t\t\t{props.description.charAt(0).toUpperCase() + props.description.slice(1)}\n\t\t\t</h4>\n\t\t</div>\n\t);\n};\n\nexport default Weather;\n\nfunction maxminTemp(min, max) {\n\tif (max && min) {\n\t\treturn (\n\t\t\t<h3 className='text-white py-3'>\n\t\t\t\t<span className='px-4'>{min}&deg;</span>\n\t\t\t\t<span className='px-4'>{max}&deg;</span>\n\t\t\t</h3>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './Components/Form/Form.js';\nimport Weather from './Components/Weather/Weather.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst API_KEY = \"YOUR_API_KEY\";\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcity: undefined,\n\t\t\tcountry: undefined,\n\t\t\tmax_temp: undefined,\n\t\t\tmin_temp: undefined,\n\t\t\tcurr_temp: undefined,\n\t\t\ticon: undefined,\n\t\t\tdescription: '',\n\t\t\tmain: undefined,\n\t\t\terror: false,\n\t\t};\n\t}\n\n\tkelvinToCelcius(temperature) {\n\t\treturn Math.floor(temperature - 273.15);\n\t}\n\n\tgetWeather = async (e) => {\n\t\te.preventDefault();\n\t\tconsole.log(e);\n\t\tconst country = e.target.elements.country.value;\n\t\tconst city = e.target.elements.city.value;\n\n\t\ttry {\n\t\t\tconst api_call = await fetch(\n\t\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`\n\t\t\t);\n\n\t\t\tconst response = await api_call.json();\n\t\t\tconsole.log(response);\n\n\t\t\tthis.setState({\n\t\t\t\tcity: `${response.name}, ${response.sys.country}`,\n\t\t\t\tmain: response.weather[0].main,\n\t\t\t\tcurr_temp: response.main.temp,\n\t\t\t\tmax_temp: response.main.temp_max,\n\t\t\t\tmin_temp: response.main.temp_min,\n\t\t\t\tdescription: response.weather[0].description,\n\t\t\t\ticon: response.weather[0].icon,\n\t\t\t\terror: false,\n\t\t\t});\n\t\t} catch {\n\t\t\tthis.setState({\n\t\t\t\tcity: undefined,\n\t\t\t\tcountry: undefined,\n\t\t\t\tmax_temp: undefined,\n\t\t\t\tmin_temp: undefined,\n\t\t\t\tcurr_temp: undefined,\n\t\t\t\ticon: undefined,\n\t\t\t\tdescription: '',\n\t\t\t\tmain: undefined,\n\n\t\t\t\terror: true,\n\t\t\t});\n\t\t}\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<Form loadWeather={this.getWeather} />\n\t\t\t\t<Weather\n\t\t\t\t\tcity={this.state.city}\n\t\t\t\t\tcountry={this.state.country}\n\t\t\t\t\tmaxTemp={this.state.max_temp}\n\t\t\t\t\tminTemp={this.state.min_temp}\n\t\t\t\t\tcurrTemp={this.state.curr_temp}\n\t\t\t\t\tdescription={this.state.description}\n\t\t\t\t\ticon={this.state.icon}\n\t\t\t\t\tconvertTemp={this.kelvinToCelcius}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}